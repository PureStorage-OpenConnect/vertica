#######################################################################
#
# Ansible Variables for the VMart Slow Load Playbook
#
#######################################################################
fb_api_token: "{{ lookup('env','PUREFB_API') }}"
fb_mgmt: "{{ lookup('env','PUREFB_URL') }}"
fb_fs_name: "vertica"
dbuser: "dbadmin"
dbgroup: "verticadba"
vmart_targ_bytes: 111029693051
vmart_targ_swag: 0.95
vmart_swag_bytes: "{{ vmart_targ_bytes * vmart_targ_swag }}"
vmart_file_cnt: 10000
vmart_sto_s_fact: 1300000000
vmart_sto_o_fact: 130000000
vmart_prod_dim: 13000
vmart_stor_dim: 127
vmart_prom_dim: 12
vmart_vend_dim: 127
vmart_cust_dim: 130000
vmart_empl_dim: 1300
vmart_ware_dim: 127
vmart_ship_dim: 1300000
vmart_page_dim: 1300
vmart_call_dim: 130000
vmart_onl_s_fact: 130000
vmart_inv_fact: 130000
vmart_years: "2003-2016"
vmart_define_sql: "vmart_define_schema.sql"
vmart_drop_sql: "vmart_schema_drop.sql"
vmart_pload_sql: "vmart_parallel_load.sql"
vmart_code_dir: "/opt/vertica/examples/VMart_Schema"
vmart_dest_dir: "/mnt/{{ fb_fs_name }}/vmart"
vmart_dim_tables:
  - { schema: 'online_sales', name: 'Call_Center_Dimension' }
  - { schema: 'online_sales', name: 'Online_Page_Dimension' }
  - { schema: 'store', name: 'Store_Dimension' }
  - { schema: 'public', name: 'Customer_Dimension' }
  - { schema: 'public', name: 'Warehouse_Dimension' }
  - { schema: 'public', name: 'Shipping_Dimension' }
  - { schema: 'public', name: 'Employee_Dimension' }
  - { schema: 'public', name: 'Date_Dimension' }
  - { schema: 'public', name: 'Product_Dimension' }
  - { schema: 'public', name: 'Promotion_Dimension' }
  - { schema: 'public', name: 'Vendor_Dimension' }
vmart_fact_tables:
  - { schema: 'online_sales', name: 'Online_Sales_Fact' }
  - { schema: 'store', name: 'Store_Orders_Fact' }
  - { schema: 'store', name: 'Store_Sales_Fact' }
  - { schema: 'public', name: 'Inventory_Fact' }
vmart_gen_cmd: >-
  ./vmart_gen
  --files {{ vmart_file_cnt }} --store_sales_fact {{ vmart_sto_s_fact }}
  --store_orders_fact {{ vmart_sto_o_fact }} --product_dimension {{ vmart_prod_dim }}
  --store_dimension {{ vmart_stor_dim }} --promotion_dimension {{ vmart_prom_dim }}
  --vendor_dimension {{ vmart_vend_dim }} --customer_dimension {{ vmart_cust_dim }}
  --employee_dimension {{ vmart_empl_dim }} --warehouse_dimension {{ vmart_ware_dim }}
  --shipping_dimension {{ vmart_ship_dim }} --online_page_dimension {{ vmart_page_dim }}
  --callcenter_dimension {{ vmart_call_dim }} --online_sales_fact {{ vmart_onl_s_fact }}
  --inventory_fact {{ vmart_inv_fact }} --gen_load_script
  --years {{ vmart_years }} --datadirectory {{ vmart_dest_dir }}
  --seed {{ 95603 | random(seed=inventory_hostname) }}

loadtbl_digits: 3
loadtbl_loopend: "{{ '9' * loadtbl_digits }}"
loadtbl_sleep: 3
loadtbl_sh: |
  #!/usr/bin/env bash
  rm -f ./ld_OSF.out ./ld_SOF.out ./ld_SSF.out ./ld_IF.out
  pids=""
  for (( i=0; i<={{ loadtbl_loopend }}; i++ )); do
    printf -v n "%0{{ loadtbl_digits }}d" $i
    nohup vsql -ie -c "\
      COPY online_sales.Online_Sales_Fact \
      FROM '{{ vmart_dest_dir }}/Online_Sales_Fact_*${n}.tbl' \
      ON ANY NODE DELIMITER '|' NULL '' DIRECT;" \
      >>./ld_OSF.out 2>&1 & pids="$pids $!"
    nohup vsql -ie -c "\
      COPY store.Store_Orders_Fact \
      FROM '{{ vmart_dest_dir }}/Store_Orders_Fact_*${n}.tbl' \
      ON ANY NODE DELIMITER '|' NULL '' DIRECT;" \
      >>./ld_SOF.out 2>&1 & pids="$pids $!"
    nohup vsql -ie -c "\
      COPY store.Store_Sales_Fact \
      FROM '{{ vmart_dest_dir }}/Store_Sales_Fact_*${n}.tbl' \
      ON ANY NODE DELIMITER '|' NULL '' DIRECT;" \
      >>./ld_SSF.out 2>&1 & pids="$pids $!"
    nohup vsql -ie -c "\
      COPY public.Inventory_Fact \
      FROM '{{ vmart_dest_dir }}/Inventory_Fact_*${n}.tbl' \
      ON ANY NODE DELIMITER '|' NULL '' DIRECT;" \
      >>./ld_IF.out 2>&1 & pids="$pids $!"
    wait $pids
    sleep {{ loadtbl_sleep }}
  done
vmart_usage: >-
  select proj, ROS_num, rows_mln, MiB from (
    select projection_name proj, sum(ros_count) ROS_num, round(sum(row_count)/10^6,2) as rows_mln, round(sum(used_bytes)/1024^2,2) as MiB
    from projection_storage where 1=1 group by 1
  ) as x where MiB > 0 order by MiB desc limit 10;
###  select proj, ROS_num, rows_mln, MiB from (select projection_name proj, sum(ros_count) ROS_num, round(sum(row_count)/10^6,2) as rows_mln, round(sum(used_bytes)/1024^2,2) as MiB from projection_storage where 1=1 group by 1) as x where MiB > 0 order by MiB desc limit 10;
canary_tbl: "store.Store_Sales_Fact"
count_star: "select count(*) from {{ canary_tbl }};"
